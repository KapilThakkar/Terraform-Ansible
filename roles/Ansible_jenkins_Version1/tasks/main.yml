---

#Variable setup.


- name: Include OS-Specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}.yml"
  tags: vars
- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

# Setup/install tasks.
- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'


- name: Restart Jenkins 
  service: name=jenkins state=restarted


- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes


# Configure Jenkins init settings.
- include: settings.yml

- include_tasks: user_config.yml
- set_fact:
    jenkins_users_all: '{{ [jenkins_ansible_user] + jenkins_users }}'

- include_tasks: user.yml username="{{ item.username }}" password="{{ item.password }}" sshpubkey="{{ item.sshpubkey|default('') }}"
  with_items: "{{ jenkins_users_all }}"


- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

#- name: Wait for Jenkins to start up before proceeding.
 # shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
 # register: result
 # until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
 # retries: "{{ jenkins_connection_retries }}"
 # delay: "{{ jenkins_connection_delay }}"
 # changed_when: false
 # check_mode: no
 # ignore_errors: yes


- name: Make sure the Jenkins service is enabled and running
  service:
    name: jenkins
    enabled: true
    state: started
  register: doservice


- import_tasks: pup.yml


- name: Grab Jenkins Web UI Content
  # By default, Jenkins 2 is set to require auth, so the only page we can grab 
  # without getting a 403 and redirect is the login page.
  uri:
    url: "http://localhost:{{ jenkins_http_port }}{{ jenkins_context_path | default('') }}/login"
    return_content: true
  environment:
    no_proxy: localhost
  register: jenkins_ui

- name: Verify Jenkins Web UI Content
  action: fail
  when: jenkins_ui.content.find('Jenkins ver. 2') == -1


- name: Create queue item authenticator configuration
  copy:
    src: jenkins.security.QueueItemAuthenticatorConfiguration.xml
    dest: "~jenkins/jenkins.security.QueueItemAuthenticatorConfiguration.xml"

- name: Create job-dsl security configuration
  copy:
    src: javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration.xml
    dest: "~jenkins/javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration.xml"

- name: Create download settings configuration
  copy:
    src: jenkins.model.DownloadSettings.xml
    dest: "~jenkins/jenkins.model.DownloadSettings.xml"

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes




